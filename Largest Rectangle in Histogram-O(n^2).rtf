{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 //o(n^2)\
public class Solution \{\
    public static class Pair\{\
        int val;\
        int pos;\
        Pair(int v,int p)\{\
            val=v;\
            pos=p;\
        \}\
    \}\
    public int largestRectangleArea(int[] height) \{\
        int n=height.length;\
        ArrayList<Pair> pairs=new ArrayList<Pair>();\
        for(int i=0;i<n;i++)\{\
            Pair tmp=new Pair(height[i],i+1);\
            pairs.add(tmp);\
        \}\
        Comparator<Pair> c = new Comparator<Pair>()\{\
            public int compare(Pair p1,Pair p2)\{\
                if(p1.val<p2.val) return -1;\
                if(p1.val==p2.val) return 0;\
                return 1;\
            \}\
        \};\
        Collections.sort(pairs,c);\
        int[] decidepos= new int[n+1];\
        for(int i=0;i<pairs.size();i++)\{\
            decidepos[pairs.get(i).pos]=i+1;\
        \}\
        int max=0;\
        for(int i=0;i<pairs.size();i++)\{\
            int minheight=pairs.get(i).val;\
            int pos=pairs.get(i).pos;\
            int j;\
            for(j=pos-1;j>=1;j--)\{\
                if(decidepos[j]<decidepos[pos]) break;\
            \}\
             int start=j+1;\
           \
            int w;\
            for(w=pos+1;w<=n;w++)\{\
                if(decidepos[w]<decidepos[pos]) break;\
            \}\
            int end=w-1;\
           \
            int width=end-start+1;\
            max=Math.max(max,minheight*width);\
        \}\
        return max;\
        \
    \}\
\}}