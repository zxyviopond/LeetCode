{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red127\green0\blue85;\red63\green95\blue191;\red0\green0\blue192;
\red63\green127\blue95;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs22 \cf2 import\cf0  java.util.*;\
\
\pard\pardeftab720
\cf3 /*************************************************************************\cf0 \
\cf3  *  3Sum \ul Leetcode\cf0 \ulnone \
\cf3  * \cf0 \
\cf3  *************************************************************************/\cf0 \
\pard\pardeftab720
\cf2 public\cf0  \cf2 class\cf0  Sourcecode \{\
	\
\
	\
	\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 void\cf0  main(String[] arg)\{\
		Scanner scanner=\cf2 new\cf0  Scanner(System.\cf4 in\cf0 );\
		\cf2 int\cf0  n = scanner.nextInt();\
		\cf2 int\cf0 [] numarray=\cf2 new\cf0  \cf2 int\cf0 [n];\
		\cf2 for\cf0 (\cf2 int\cf0  i=0;i<n;i++)\{\
			numarray[i]=scanner.nextInt();\
		\}\
		threeSum(numarray);\
	\}\
\
	\cf2 public\cf0  \cf2 static\cf0  ArrayList<ArrayList<Integer>> threeSum(\cf2 int\cf0 [] numarray) \{\
		ArrayList<ArrayList<Integer> >result = \cf2 new\cf0  ArrayList<ArrayList<Integer>>();\
		ArrayList<ArrayList<Integer> >finalresult = \cf2 new\cf0  ArrayList<ArrayList<Integer>>();\
		ArrayList<ArrayList<Integer> >newfinalresult = \cf2 new\cf0  ArrayList<ArrayList<Integer>>();\
		ArrayList<Integer> combo=\cf2 new\cf0  ArrayList<Integer>();\
		combination(0,numarray,3,combo,3,result);\
		\
\
		\cf2 for\cf0 (\cf2 int\cf0  i=0;i<result.size();i++)\{\
			ArrayList<Integer> thearray=result.get(i);\
			Collections.sort(thearray);\
			\cf2 int\cf0  a = thearray.get(0);\
			\cf2 int\cf0  b= thearray.get(1);\
			\cf2 int\cf0  c = thearray.get(2);\
		\
			\cf2 if\cf0 (a+b+c ==0)\{\
				\cf5 //System.out.println("hey:"+a+","+b+","+c);\cf0 \
				finalresult.add(result.get(i));\
			\}\
		\}\
		\
		\
		\cf2 if\cf0 (finalresult.size()==0)\{\
			\cf2 return\cf0  newfinalresult;\
		\}\
		\
		\cf2 for\cf0 (\cf2 int\cf0  i=0;i<finalresult.size();i++)\{\
			Collections.sort(finalresult.get(i));\
			\cf5 //System.out.println(finalresult.get(i));\cf0 \
		\}\
		Comparator<? \cf2 super\cf0  ArrayList<Integer>> c = \cf2 new\cf0  Comparator<ArrayList<Integer>>()\{\
\
			\cf2 public\cf0  \cf2 int\cf0  compare(ArrayList<Integer> a1, ArrayList<Integer> a2) \{\
				\cf2 for\cf0 (\cf2 int\cf0  i=0;i<3;i++)\{\
					\cf2 if\cf0 (a1.get(i)<a2.get(i))\{\
						\cf2 return\cf0  1;\
					\}\
					\cf2 if\cf0 (a1.get(i)==a2.get(i))\{\
						\cf2 continue\cf0 ;\
					\}\
					\cf2 if\cf0 (a1.get(i)>a2.get(i))\{\
						\cf2 return\cf0  -1;\
					\}\
				\}\
				\cf2 return\cf0  0;\
				\
			\}\
\
			\};\
		Collections.sort(finalresult,c);\
		\cf2 for\cf0 (\cf2 int\cf0  i=0;i<finalresult.size();)\{\
			newfinalresult.add(finalresult.get(i));\
			    \cf2 int\cf0  t=i;\
				\cf2 while\cf0 (t<finalresult.size()&&thesame(finalresult.get(t),finalresult.get(i)))\{\
					t++;\
				\}\
				i=t;\
		\}\
		\
		\
	\cf5 /*		\cf0 \
\pard\pardeftab720
\cf5 		for(\cf5 \ul \ulc5 int\cf5 \ulnone  i=0;i<newfinalresult.size();i++)\cf0 \
\cf5 		\{\cf0 \
\cf5 			System.out.println(newfinalresult.get(i));\cf0 \
\cf5 			\cf0 \
\cf5 		\}\cf0 \
\cf5 		*/\cf0 \
		\cf2 return\cf0  newfinalresult;\
	\}\
\
	\cf2 private\cf0  \cf2 static\cf0  \cf2 boolean\cf0  thesame(ArrayList<Integer> a1,\
			ArrayList<Integer> a2) \{\
		\cf2 for\cf0 (\cf2 int\cf0  i=0;i<3;i++)\{\
			\cf2 if\cf0 (a1.get(i)!=a2.get(i)) \cf2 return\cf0  \cf2 false\cf0 ;\
		\}\
		\
		\cf2 return\cf0  \cf2 true\cf0 ;\
	\}\
\
	\cf2 public\cf0  \cf2 static\cf0  ArrayList<ArrayList<Integer>> combination(\cf2 int\cf0  start,\cf2 int\cf0 [] numarray,\cf2 int\cf0  sum,ArrayList<Integer> combo,\cf2 int\cf0  ori,ArrayList<ArrayList<Integer>> result) \{\
		\cf2 if\cf0 (start>=numarray.\cf4 length\cf0 )\{\
			\cf2 if\cf0 (combo.size()==ori)\{\
				ArrayList<Integer> newcombo=\cf2 new\cf0  ArrayList<Integer>();\
				\cf2 for\cf0 (Integer in : combo)\{\
					newcombo.add(in);\
				\}\
				result.add(newcombo);\
				\
				\}\
			\cf2 return\cf0  result;\
		\}\
		\cf2 if\cf0 (sum==0)\{\
			\cf2 if\cf0 (combo.size()==ori)\{\
				ArrayList<Integer> newcombo=\cf2 new\cf0  ArrayList<Integer>();\
				\cf2 for\cf0 (Integer in : combo)\{\
					newcombo.add(in);\
				\}\
				result.add(newcombo);\
			\}\
			\cf2 return\cf0  result;\
		\}\
		combo.add(numarray[start]);\
		combination(start+1,numarray,sum-1,combo,ori,result);\
		\cf2 int\cf0  index=combo.indexOf(numarray[start]);\
		combo.remove(index);\
		combination(start+1,numarray,sum,combo,ori,result);\
		\cf2 return\cf0  result;\
		\
	\}\
\
	\
	\
	\
\}}