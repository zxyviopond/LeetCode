{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 /**\
 * Definition for binary tree\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
public class Solution \{\
    public boolean isSameTree(TreeNode p, TreeNode q) \{\
        if(p==null&&q==null) return true;\
        if(p==null&&q!=null) return false;\
        if(p!=null&&q==null) return false;\
        \
        ArrayList<Integer> p_preorder=new ArrayList<Integer>();\
        ArrayList<Integer> q_preorder=new ArrayList<Integer>();\
        preorder(p_preorder,p);\
        preorder(q_preorder,q);\
        if(!identical(p_preorder,q_preorder)) return false;\
        ArrayList<Integer> p_inorder=new ArrayList<Integer>();\
        ArrayList<Integer> q_inorder=new ArrayList<Integer>();\
        inorder(p_inorder,p);\
        inorder(q_inorder,q);\
        if(!identical(p_inorder,q_inorder)) return false;\
        return true;\
    \}\
    \
    public void preorder(ArrayList<Integer> a,TreeNode t)\{\
        if(t==null)\{a.add(10000);return;\}\
        a.add(t.val);\
        preorder(a,t.left);\
        preorder(a,t.right);\
    \}\
    \
    public void inorder(ArrayList<Integer> a,TreeNode t)\{\
        if(t==null) \{a.add(10000);return;\}\
        inorder(a,t.left);\
        a.add(t.val);\
        inorder(a,t.right);\
    \}\
    \
    public boolean identical(ArrayList<Integer> a1,ArrayList<Integer> a2)\{\
        if(a1.size()!=a2.size()) return false;\
        for(int i=0;i<a1.size();i++)\{\
            if(!a1.get(i).equals(a2.get(i))) return false;\
        \}\
        return true;\
    \}\
\}}