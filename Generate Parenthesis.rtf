{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red127\green0\blue85;\red63\green95\blue191;\red0\green0\blue192;
\red42\green0\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs22 \cf2 import\cf0  java.util.*;\
\
\pard\pardeftab720
\cf3 /*************************************************************************\cf0 \
\cf3  *   \ul Leetcode\ulnone  Generate Parenthesis\cf0 \
\cf3  *************************************************************************/\cf0 \
\pard\pardeftab720
\cf2 public\cf0  \cf2 class\cf0  Sourcecode \{\
	\
    \
	\cf2 public\cf0  \cf2 static\cf0  \cf2 void\cf0  main(String[] arg)\{\
		Scanner input=\cf2 new\cf0  Scanner(System.\cf4 in\cf0 );\
		\cf2 int\cf0  n = input.nextInt();\
		ArrayList<String> ar=generateParenthesis(n);\
		\cf2 for\cf0 (\cf2 int\cf0  i=0;i<ar.size();i++)\{\
			System.\cf4 out\cf0 .println(ar.get(i));\
		\}\
	\}\
	\
	\cf2 public\cf0  \cf2 static\cf0  ArrayList<String> generateParenthesis(\cf2 int\cf0  n) \{\
		ArrayList<String> ar=\cf2 new\cf0  ArrayList<String>();\
       Stack<Character> stackleft=\cf2 \ul \ulc2 new\cf0 \ulc0  Stack()\ulnone ;\
       Stack<Character> stackright=\cf2 \ul \ulc2 new\cf0 \ulc0  Stack()\ulnone ;\
       \cf2 for\cf0 (\cf2 int\cf0  i=1;i<=n;i++)\{\
    	   stackleft.add(\cf5 '('\cf0 );\
       \}\
       \cf2 for\cf0 (\cf2 int\cf0  i=1;i<=n;i++)\{\
    	   stackright.add(\cf5 ')'\cf0 );\
       \}\
      \cf2 char\cf0 [] resultset=\cf2 new\cf0  \cf2 char\cf0 [2*n];\
       showallpop(stackleft,stackright,resultset,0,ar);\
       \cf2 return\cf0  ar;\
        \
    \}\
\
	\cf2 private\cf0  \cf2 static\cf0  \cf2 void\cf0  showallpop(Stack<Character> stackleft,\
			Stack<Character> stackright,\cf2 char\cf0 [] resultset,\cf2 int\cf0  pos,ArrayList<String> ar) \{\
		\cf2 if\cf0 (stackleft.isEmpty())\{\
			StringBuffer tmp = \cf2 new\cf0  StringBuffer();\
			\cf2 for\cf0 (\cf2 int\cf0  i=0;i<resultset.\cf4 length\cf0 ;i++)\{\
				\cf2 if\cf0 (resultset[i]!=\cf5 ' '\cf0 ) tmp.append(resultset[i]);\
			\}\
			\cf2 for\cf0 (\cf2 int\cf0  i=0;i<stackright.size();i++) tmp.append(\cf5 ')'\cf0 );\
			String s=tmp.toString();\
			ar.add(s);\
			\cf2 return\cf0 ;\
		\}\
		\cf2 char\cf0  l=stackleft.pop();\
		resultset[pos]=l;\
		showallpop(stackleft,stackright,resultset,pos+1,ar);\
		stackleft.push(l);\
		resultset[pos]=\cf5 ' '\cf0 ;\
		\cf2 if\cf0 (stackleft.size()<stackright.size())\{\
		\cf2 char\cf0  r=stackright.pop();\
		resultset[pos]=r;\
		showallpop(stackleft,stackright,resultset,pos+1,ar);\
		stackright.push(r);\
		resultset[pos]=\cf5 ' '\cf0 ;\
		\}\
		\
	\}\
\
	 \
\}}