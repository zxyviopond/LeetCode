{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 public class Solution \{\
    public static int lengthOfLongestSubstring(String string1) \{\
    	char[] c = string1.toCharArray();\
		if(string1.length()<=1)\{\
			return string1.length();\
		\}\
		\
		int[] pos = new int[26];\
		for(int i=0;i<pos.length;i++)\{\
			pos[i]=-1;\
		\}\
		int max=1;\
		int start=0;//Start Pointer\
		for(int i=0;i<string1.length();i++)\{\
			char current=c[i];\
			int code=current-'a';\
			if(pos[code]<start)\{//Not in the current subsequence\
				pos[code]=i;//Update the latest occurence\
				max=Math.max(max, i-start+1);//Save the max\
			\}\
			else\{//In the Current subsequence, repeat occurs\
				//max=Math.max(max, i-start);//Save the max\
				//System.out.println("currentmax="+max+"pos="+i);\
				int originalplace=pos[code];//Get the original place occured\
				start=originalplace+1;//Move on\
				pos[code]=i;\
			\}\
		\}\
		return max;\
		\
	\}\
\}}