{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 public class Solution \{\
   public static boolean canJump(int[] a) \{\
    	boolean connect[][] = new boolean[a.length][a.length];\
		int n=a.length;\
		for(int i=0;i<n;i++)\{\
			for(int j=0;j<n;j++)\{\
				if(Math.abs(j-i)<=a[i])\{\
					connect[i][j]=true;\
				\}\
				\
			\}\
		\}\
		boolean result=false;\
		boolean[] visited=new boolean[n];\
		result=findpath(connect,0,n-1,visited,n);\
		return result;\
	\}\
	private static boolean findpath(boolean[][] connect, int startindex, int endindex,boolean[] visited,int n) \{\
		if(startindex==endindex) return true;\
		visited[startindex]=true;\
		for(int j=0;j<n;j++)\{\
			boolean tmp=false;\
			if(connect[startindex][j]==true&&visited[j]==false)\{\
				tmp=findpath(connect,j,endindex,visited,n);\
			\}\
			if(tmp==true) return true;\
		\}\
		return false;\
	\}\
\}}