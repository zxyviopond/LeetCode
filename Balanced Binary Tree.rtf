{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 //Balanced Binary Tree Leetcode\
\
public class Solution \{\
    public boolean isBalanced(TreeNode root)\{\
        if(root==null) return true;\
        if(!istheNodeBalanced(root))\{\
            return false;\
        \}\
        else\{\
            if(isBalanced(root.left)&&isBalanced(root.right))\{\
                return true;\
            \}\
        \}\
        return false;\
    \}\
    public boolean istheNodeBalanced(TreeNode root) \{\
        if(root==null) return true;\
        int leftdepth=Depth(root.left);\
        int rightdepth=Depth(root.right);\
        int difference=Math.abs(leftdepth-rightdepth);\
        if(difference>1)\{\
            return false;\
        \}\
        else\{\
            return true;\
        \}\
        \
    \}\
    \
    public static int Depth(TreeNode root)\{\
        if(root==null) return 0;\
        int left=Depth(root.left);\
        int right=Depth(root.right);\
        if(left==0&&right==0) return 1;\
        int height;\
        if(left>right)\{\
            height=left;\
        \}\
        else\{\
            height=right;\
        \}\
        return height+1;\
        \
    \}\
\}}