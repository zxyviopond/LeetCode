{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 public class Solution \{\
    public ArrayList<ArrayList<Integer>> levelOrderBottom(TreeNode root) \{\
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();\
        if(root==null) return result;\
        int level=Depth(root);\
        ArrayList<Integer>[] a = new ArrayList[level+1];\
        for(int i=0;i<=level-1;i++)\{\
            a[i]=new ArrayList<Integer>();\
        \}\
        inOrderTraverse(root,a,root);\
        
\b for(int i=level-1;i>=0;i--)\{ // Change this only
\b0 \
          ArrayList<Integer> thislevel=new ArrayList<Integer>();\
          for(Integer c : a[i]) thislevel.add(c);\
          result.add(thislevel);\
        \}\
        return result;\
    \}\
    \
    public void inOrderTraverse(TreeNode root,ArrayList<Integer>[] a,TreeNode realroot)\{\
        if(root==null) return;\
        inOrderTraverse(root.left,a,realroot);\
        int level=Distance2Root(root,realroot);\
        a[level].add(root.val);\
        inOrderTraverse(root.right,a,realroot);\
    \}\
    \
    public int Distance2Root(TreeNode node,TreeNode root)\{\
     if(root == null) return 1000000;\
     if(node == root) return 0;\
     int dist = Math.min(Distance2Root(node,root.left),Distance2Root(node,root.right));\
     return dist+1;\
     \
    \}\
    \
    public int Depth(TreeNode root)\{\
        if(root == null) return 0;\
        int left = Depth(root.left);\
        int right = Depth(root.right);\
        int dept = Math.max(left,right);\
        return dept+1;\
    \}\
   \
\}}