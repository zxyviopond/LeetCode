{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 /**\
 * Definition for binary tree\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
public class Solution \{\
    public void flatten(TreeNode root) \{\
        if(root == null) return;\
        ArrayList<TreeNode> treesaver = new ArrayList<TreeNode>();\
        dfs(root,treesaver);\
        for(int i=0;i<treesaver.size()-1;i++)\{\
            treesaver.get(i).left=null;\
            treesaver.get(i).right=treesaver.get(i+1);\
        \}\
        treesaver.get(treesaver.size()-1).right=null;\
        treesaver.get(treesaver.size()-1).left=null;\
    \}\
    \
    public void dfs(TreeNode root,ArrayList<TreeNode> treesaver)\{\
        if(root == null) return;\
        treesaver.add(root);\
        dfs(root.left,treesaver);\
        dfs(root.right,treesaver);\
    \}\
\}}