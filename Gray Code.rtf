{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red127\green0\blue85;\red63\green95\blue191;\red0\green0\blue192;
\red63\green127\blue95;\red42\green0\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs22 \cf2 import\cf0  java.util.*;\
\
\pard\pardeftab720
\cf3 /*************************************************************************\cf0 \
\cf3  *   \ul Leetcode\ulnone  Gray Code\cf0 \
\cf3  *************************************************************************/\cf0 \
\pard\pardeftab720
\cf2 public\cf0  \cf2 class\cf0  Sourcecode \{\
	\
    \cf2 public\cf0  \cf2 static\cf0  \cf2 class\cf0  Node\{\
    	\cf2 public\cf0  \cf2 int\cf0  \cf4 value\cf0 ;\
    	\cf2 public\cf0  ArrayList<Node> \cf4 links\cf0 ;\
    	Node(\cf2 int\cf0  x)\{\
    		\cf2 this\cf0 .\cf4 value\cf0 =x;\
    		\cf2 this\cf0 .\cf4 links\cf0 =\cf2 new\cf0  ArrayList<Node>();\
    	\}\
    \}\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 void\cf0  main(String[] arg)\{\
		Scanner input=\cf2 new\cf0  Scanner(System.\cf4 in\cf0 );\
		\cf2 int\cf0  n = input.nextInt();\
		ArrayList<Integer> result=greyCode(n);\
		System.\cf4 out\cf0 .println(result);\
	\}\
\
	\cf2 private\cf0  \cf2 static\cf0  ArrayList<Integer> greyCode(\cf2 int\cf0  n) \{\
		ArrayList<Integer> ar=\cf2 new\cf0  ArrayList<Integer>();\
		Node[] nodes = \cf2 new\cf0  Node[1<<n];\
		\cf2 for\cf0 (\cf2 int\cf0  i=0;i<nodes.\cf4 length\cf0 ;i++)\{\
			nodes[i]=\cf2 new\cf0  Node(i);\
		\}\
		\
		\cf2 for\cf0 (\cf2 int\cf0  i=0;i<nodes.\cf4 length\cf0 ;i++)\{\
			\cf2 for\cf0 (\cf2 int\cf0  j=0;j<nodes.\cf4 length\cf0 ;j++)\{\
				\cf2 if\cf0 (i==j) \cf2 continue\cf0 ;\
				\cf2 int\cf0  tmp=i^j;\
				String result=Integer.toBinaryString(tmp);\
				\cf5 //System.out.println(result);\cf0 \
				\cf2 if\cf0 (result.indexOf(\cf6 '1'\cf0 )==result.lastIndexOf(\cf6 '1'\cf0 )&&result.indexOf(\cf6 '1'\cf0 )!=-1)\{\cf5 //Only One Bit not the same\cf0 \
					\cf5 //System.out.println("good");\cf0 \
					nodes[i].\cf4 links\cf0 .add(nodes[j]);\
				\}\
			\}\
		\}\
		ArrayList<Integer> results=\cf2 new\cf0  ArrayList<Integer>();\
		\cf2 boolean\cf0 [] find = \cf2 new\cf0  \cf2 boolean\cf0 [1];\
		Traverse(nodes,nodes[0],n,ar,results,find);\
		\
		\cf2 return\cf0  results;\
	\}\
\
	\cf2 private\cf0  \cf2 static\cf0  \cf2 void\cf0  Traverse(Node[] nodes, Node currentnode,\cf2 int\cf0  n, ArrayList<Integer> ar,ArrayList<Integer> results,\cf2 boolean\cf0 [] find) \{\
		   \cf2 if\cf0 (find[0]==\cf2 true\cf0 ) \cf2 return\cf0 ;\
			ar.add(currentnode.\cf4 value\cf0 );\
			\cf2 if\cf0 (ar.size()==1<<n)\{\
				\cf2 for\cf0 (Integer c : ar) results.add(c);\
				find[0]=\cf2 true\cf0 ;\
				\cf2 return\cf0 ;\
			\}\
			\
			\cf2 for\cf0 (\cf2 int\cf0  j=0;j<currentnode.\cf4 links\cf0 .size();j++)\{\
				\cf2 if\cf0 (ar.contains(currentnode.\cf4 links\cf0 .get(j).\cf4 value\cf0 )) \cf2 continue\cf0 ;\
				Traverse(nodes,currentnode.\cf4 links\cf0 .get(j),n,ar,results,find);\
			\}\
			\
			ar.remove(ar.size()-1);\
		\
		\cf2 return\cf0 ;\
		\
	\}\
	\
	\
\
	 \
\}}