{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 /**\
 * Definition for binary tree\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
public class Solution \{\
    public boolean isSymmetric(TreeNode root) \{\
        if(root==null) return true;\
        ArrayList<Integer> inorder=new ArrayList<Integer>();\
        inorder(root,inorder);\
        return ishuiwen(inorder);\
        \
    \}\
    public void inorder(TreeNode root, ArrayList<Integer> ar)\{\
        if(root==null)\{\
            return;\
        \}\
        inorder(root.left,ar);\
        ar.add(root.val);\
        inorder(root.right,ar);\
    \}\
    \
    public boolean ishuiwen(ArrayList<Integer> ar)\{\
        int n=ar.size();\
        if(n%2==0) return false;\
        int middle=(n+1)/2-1;\
        for(int i=0;i<middle;i++)\{\
            if(!ar.get(i).equals(ar.get(n-1-i))) return false;\
        \}\
        return true;\
    \}\
    \
\}}