{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 /**Large TLE\
 * Definition for an interval.\
 * public class Interval \{\
 *     int start;\
 *     int end;\
 *     Interval() \{ start = 0; end = 0; \}\
 *     Interval(int s, int e) \{ start = s; end = e; \}\
 * \}\
 */\
public class Solution \{\
   public static ArrayList<Interval> merge(ArrayList<Interval> intervals) \{\
    	ArrayList<Interval> result=new ArrayList<Interval>();\
		if(intervals.size()==0) return result;\
		Comparator<? super Interval> c = new Comparator<Interval>()\{\
\
			public int compare(Interval o1, Interval o2) \{\
				if(o1.start<o2.start)\{\
					return -1;\
				\}\
				if(o1.start==o2.start)\{\
					return 0;\
				\}\
				return 1;\
			\}\};\
		Collections.sort(intervals,c);\
		for(int i=0;i<intervals.size()-1;i++)\{\
			if(haveoverlap(intervals.get(i),intervals.get(i+1)))\{\
				Interval merged=merge(intervals.get(i),intervals.get(i+1));\
				intervals.add(i,merged);\
				intervals.remove(i+1);\
				intervals.remove(i+1);\
				i--;\
			\}\
		\}\
		\
		return intervals;\
    \}\
	public static boolean haveoverlap(Interval i1,Interval i2)\{\
		if(i1.end<i2.start) return false;\
		if(i2.end<i1.start) return false;\
		\
		return true;\
	\}\
	public static Interval merge(Interval i1,Interval i2)\{\
		int start=Math.min(i1.start, i2.start);\
		int end=Math.max(i1.end, i2.end);\
		Interval result = new Interval(start,end);\
		return result;\
	\}\
	\
\}}