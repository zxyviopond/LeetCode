{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 /**\
 * Definition for binary tree\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
public class Solution \{\
    public int maxPathSum(TreeNode root) \{\
        ArrayList<TreeNode> ar = Serialize(root);\
        int len=ar.size();\
       \
        \
        int[][] dpresult=new int[len][len];\
        for(int i=0;i<len;i++)\{\
            for(int j=0;j<len;j++)\{\
                if(i==j) \{\
                dpresult[i][j]=ar.get(i).val;\
                \}\
                else\{\
                 dpresult[i][j]=-10000;\
                \}\
                \
            \}\
        \}\
        \
        \
        for(int i=0;i<len;i++)\{\
            for(int j=i;j<len;j++)\{\
                dp(i,j,ar,dpresult,root);\
            \}\
        \}\
        \
        \
        \
        \
        int max=-10000;\
        for(int i=0;i<len;i++)\{\
            for(int j=i;j<len;j++)\{\
                if(dpresult[i][j]>max) max=dpresult[i][j];\
            \}\
        \}\
        return max;\
        \
        \
        \
    \}\
    \
    public int getposition(TreeNode find, ArrayList<TreeNode> ar)\{\
        for(int i=0;i<ar.size();i++)\{\
            if(ar.get(i)==find)\{\
                return i;\
            \}\
        \}\
        return -1;\
    \}\
    \
    public int dp(int start, int end, ArrayList<TreeNode> ar,int[][] dpresult,TreeNode Root)\{\
        if(dpresult[start][end]!=-10000) return dpresult[start][end];\
         if(dpresult[end][start]!=-10000) return dpresult[end][start];\
        TreeNode[] parent=new TreeNode[1];\
        dfs(Root,ar.get(end),parent);\
        int newend=getposition(parent[0],ar);\
        int tmp=ar.get(end).val+dp(start,newend,ar,dpresult,Root);\
        dpresult[start][end]=tmp;\
        dpresult[end][start]=tmp;\
        return tmp;\
        \
    \}\
    public ArrayList<TreeNode> Serialize(TreeNode root)\{\
        ArrayList<TreeNode> a = new ArrayList<TreeNode>();\
        Queue<TreeNode> q = new LinkedList<TreeNode>();\
        TreeNode p = root;\
        q.add(p);\
        while(!q.isEmpty())\{\
            p=q.poll();\
            if(p!=null)\{\
                a.add(p);\
                q.add(p.left);\
                q.add(p.right);\
            \}\
        \}\
        return a;\
    \}\
    public int dfs(TreeNode Root, TreeNode Node,TreeNode[] parent)\{\
        if(Root == null) return 0;\
        if(Root == Node) return 1;\
        int isleft=dfs(Root.left,Node,parent);\
        int isright=dfs(Root.right,Node,parent);\
        if(isleft==1||isright==1)\{\
            parent[0]=Root;\
        \}\
        return 0;\
    \}\
\}}