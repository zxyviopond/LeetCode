{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 public class Solution \{\
    public static class Node\{\
    	int index;\
		int depth;\
		Node(int in,int de)\{\
			index=in;\
			depth=de;\
		\}\
	\}\
	\
	public static int jump(int[] a) \{\
		int connect[][] = new int[a.length][a.length];\
		int n=a.length;\
		for(int i=0;i<n;i++)\{\
			for(int j=0;j<n;j++)\{\
				if(Math.abs(j-i)<=a[i])\{\
					connect[i][j]=1;\
				\}\
				\
			\}\
		\}\
		int result;\
		int[] visited=new int[n];\
		result=findpath(connect,0,n-1,visited,n);\
		return result;\
	\}\
	private static int findpath(int[][] connect, int startindex, int endindex,int[] visited,int n) \{\
		\
		Queue<Node> q = new LinkedList<Node>();\
		visited[startindex]=1;\
		q.add(new Node(startindex,0));\
		while(!q.isEmpty())\{\
			Node headnode=q.poll();\
			int headindex=headnode.index;\
			visited[headindex]=1;\
			if(headindex==endindex)\{\
				//System.out.println(headnode.depth);\
				return headnode.depth;\
			\}\
			for(int i=0;i<n;i++)\{\
				if(connect[headindex][i]==1&&visited[i]!=-1)\{\
					Node nnode=new Node(i,headnode.depth+1);\
					q.add(nnode);//ExtendNode\
				\}\
			\}\
		\}\
		return -1;\
		\
	\}\
\}}